{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["FeedbackOptions","buttons","onLeaveFeedback","Object","keys","map","button","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","App","useState","setGood","setNeutral","setBad","countTotalFeedback","values","reduce","value","countPositiveFeedbackPercentage","Math","round","totalFeedback","e","currentTarget","prevState","message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAyBeA,EArBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,8BACGC,OAAOC,KAAKH,GAASI,KAAI,SAACC,GAAD,OACxB,wBAAqBC,KAAMD,EAAQE,QAASN,EAA5C,SACGI,GADUA,SCkBNG,EAvBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,gCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,EAAX,OACA,mDAEGC,EAFH,YCMSC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKD,IACJC,MCFQC,EAJM,WACnB,OAAO,mD,MCgFMC,MA1Ef,WACE,MAAwBC,mBAAS,GAAjC,mBAAOV,EAAP,KAAaW,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOT,EAAP,KAAgBW,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOR,EAAP,KAAYW,EAAZ,KAEMtB,EAAU,CAAES,OAAMC,UAASC,OAuB3BY,EAAqB,WAIzB,OAFwBrB,OAAOsB,OAAOxB,GAEfyB,QAAO,SAACb,EAAOc,GAAR,OAAkBd,EAAQc,IAAO,IAG3DC,EAAkC,WACtC,IAAMf,EAAQW,IAEd,OAAc,IAAVX,EACK,EAGFgB,KAAKC,MAAOpB,EAAOG,EAAS,MAG/BkB,EAAgBP,IAEtB,OACE,qCACE,cAAC,EAAD,CAASR,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBf,QAASA,EAASC,gBA3CjB,SAAC8B,GAGvB,OAFaA,EAAEC,cAAc1B,MAG3B,IAAK,OACHc,GAAQ,SAACa,GAAD,OAAeA,EAAY,KACnC,MAEF,IAAK,UACHZ,GAAW,SAACY,GAAD,OAAeA,EAAY,KACtC,MAEF,IAAK,MACHX,GAAO,SAACW,GAAD,OAAeA,EAAY,KAClC,MAEF,QACE,aA6BDH,EAAgB,EACf,cAAC,EAAD,CAASf,MAAM,aAAf,SACE,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOW,IACPV,mBACEc,IACIA,IACA,MAKV,cAAC,EAAD,CAAcO,QAAQ,0BCtE9BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.38f3769a.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./FeedbackOptions.module.css\";\n\nconst FeedbackOptions = ({ buttons, onLeaveFeedback }) => {\n  return (\n    <div>\n      {Object.keys(buttons).map((button) => (\n        <button key={button} name={button} onClick={onLeaveFeedback}>\n          {button}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  buttons: PropTypes.shape({\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n  }).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total} </p>\n      <p>\n        Positive feedback:\n        {positivePercentage} %\n      </p>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <>\n      <h1>{title}</h1>\n      {children}\n    </>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","const Notification = () => {\n  return <p>No feedback given</p>;\n};\n\nexport default Notification;\n","import { useState } from \"react\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Section from \"./components/Section\";\nimport Notification from \"./components/Notification\";\nimport \"./App.css\";\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const buttons = { good, neutral, bad };\n\n  const handleIncrement = (e) => {\n    const name = e.currentTarget.name;\n\n    switch (name) {\n      case \"good\":\n        setGood((prevState) => prevState + 1);\n        break;\n\n      case \"neutral\":\n        setNeutral((prevState) => prevState + 1);\n        break;\n\n      case \"bad\":\n        setBad((prevState) => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    // return good + neutral + bad;\n    const feedbacksValues = Object.values(buttons);\n\n    return feedbacksValues.reduce((total, value) => total + value, 0);\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n\n    if (total === 0) {\n      return 0;\n    }\n\n    return Math.round((good / total) * 100);\n  };\n\n  const totalFeedback = countTotalFeedback();\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions buttons={buttons} onLeaveFeedback={handleIncrement} />\n      </Section>\n\n      {totalFeedback > 0 ? (\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={\n              countPositiveFeedbackPercentage()\n                ? countPositiveFeedbackPercentage()\n                : 0\n            }\n          />\n        </Section>\n      ) : (\n        <Notification message=\"No feedback given\" />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}